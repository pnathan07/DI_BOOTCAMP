#Exercice 1 
#Importance of Data Visualization in Data Analysis
#Data visualization is a crucial component of data analysis due to several reasons:

#Enhanced Understanding:

#Data visualization helps to simplify complex data sets by presenting data in a graphical format. This makes it easier to understand patterns, trends, and outliers that might be missed in a textual or tabular format.
#Effective Communication:

#Visualizations can convey findings more effectively than raw numbers. They can quickly communicate key insights to stakeholders, team members, or decision-makers who may not have a technical background.
#Pattern and Trend Identification:

#Visualization tools allow analysts to identify and highlight patterns and trends within the data. For example, seasonal trends, growth patterns, and anomalies can be easily spotted in a well-designed graph.
#Decision Making:

#Visual representations of data can inform strategic decisions by providing a clear view of the current state and potential future scenarios. This is critical for businesses to make informed decisions that are backed by data.
#Exploration and Interaction:

#Interactive visualizations enable users to explore the data in more detail. They can drill down into specific data points, filter data sets, and manipulate the view to gain deeper insights.
#Data Storytelling:

#Effective data visualization can tell a compelling story about the data. It can highlight important narratives, support claims with visual evidence, and engage the audience more effectively than text-based reports.
#Purpose of a Line Graph in Data Visualization
#A line graph is a type of chart used to show information that changes over time. It is particularly useful for visualizing trends and patterns in data over intervals.

#Key Purposes of a Line Graph:

#Trend Analysis:

#Line graphs are ideal for identifying trends over a period of time. They can show whether the data is increasing, decreasing, or remaining constant.
#Time Series Data:

#When dealing with time series data, line graphs can effectively display changes and trends over different periods, such as days, months, or years.
#Comparison:

#Multiple line graphs can be plotted on the same axes to compare different data sets. For example, comparing the monthly sales of different products.
#Highlighting Fluctuations:

#Line graphs can highlight fluctuations in the data. This is useful for identifying periods of volatility or stability within the data set.
#Continuous Data Representation:

#They are suitable for representing continuous data, where each data point is connected by a line to show the continuity of the data set.

#Exercice 2 
#import matplotlib.pyplot as plt

# Liste des températures pour chaque jour de la semaine
#temperatures = [72, 74, 76, 80, 82, 78, 75]
#days = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche']

# Crée le graphique linéaire
#plt.figure(figsize=(10, 5))
#plt.plot(days, temperatures, marker='o', linestyle='-', color='b')

# Ajoute les étiquettes et le titre
#plt.xlabel('Jour')
#plt.ylabel('Température (°F)')
#plt.title('Variations de la Température sur une Semaine')

# Affiche le graphique
#plt.grid(True)
#plt.show()

#Exercice 3
#import matplotlib.pyplot as plt

# Monthly sales data
#months = ['January', 'February', 'March', 'April', 'May']
#sales = [5000, 5500, 6200, 7000, 7500]

# Create a new figure
#plt.figure(figsize=(10, 6))

# Create the bar chart
#plt.bar(months, sales, color='green')

# Add labels and title
#plt.xlabel('Month')
#plt.ylabel('Sales Amount ($)')
#plt.title('Monthly Sales Data')

# Display the chart
#plt.show()

#Exercice 4 
#import pandas as pd
#import matplotlib.pyplot as plt

# Load the dataset
#df = pd.read_csv('sales_data.csv')

# Calculate total quantity of products sold
#total_quantity_sold = df['quantity'].sum()
#print(f"Total quantity of products sold: {total_quantity_sold}")

# Calculate revenue for each transaction
#df['revenue'] = df['quantity'] * df['price_per_unit']

# Identify category with highest revenue and calculate its total revenue
#category_revenue = df.groupby('category')['revenue'].sum()
#highest_revenue_category = category_revenue.idxmax()
#highest_revenue = category_revenue.max()
#print(f"Category with highest revenue: {highest_revenue_category}")
#print(f"Total revenue generated by {highest_revenue_category}: ${highest_revenue}")

# Calculate average revenue per sale
#average_revenue_per_sale = df['revenue'].mean()
#print(f"Average revenue per sale: ${average_revenue_per_sale:.2f}")

# Convert date to datetime format
#df['date'] = pd.to_datetime(df['date'])

# Group by quarters and sum the revenue
#df['quarter'] = df['date'].dt.to_period('Q')
#quarterly_revenue = df.groupby('quarter')['revenue'].sum()

# Plotting the bar chart for total revenue by quarter
#plt.figure(figsize=(10, 6))
#quarterly_revenue.plot(kind='bar', color='skyblue')
#plt.title('Total Revenue by Quarter')
#plt.xlabel('Quarter')
#plt.ylabel('Revenue ($)')
#plt.xticks(rotation=0)
#plt.grid(axis='y')
#plt.tight_layout()
#plt.show()

#Exercice 5 
import matplotlib.pyplot as plt
import numpy as np

# Generate x values
x = np.linspace(-10, 10, 100)  # 100 points from -10 to 10

# Compute y values (y = x^2)
y = x**2

# Create the line plot
plt.figure(figsize=(8, 6))
plt.plot(x, y, label='y = x^2', color='blue', linewidth=2)

# Add title and labels
plt.title('Line Plot of y = x^2')
plt.xlabel('x')
plt.ylabel('y')

# Show grid
plt.grid(True)

# Display the plot
plt.legend()  # Show legend
plt.show()

import matplotlib.pyplot as plt

# Product names and sales values
products = ['A', 'B', 'C', 'D']
sales = [15, 30, 45, 20]

# Create the bar chart
plt.figure(figsize=(8, 6))
plt.bar(products, sales, color=['blue', 'green', 'orange', 'red'])

# Add title and labels
plt.title('Weekly Sales Data')
plt.xlabel('Products')
plt.ylabel('Sales')

# Display the plot
plt.show()

import matplotlib.pyplot as plt

# Data for favorite fruits
fruits = ['Apples', 'Bananas', 'Cherries', 'Dates']
percentages = [40, 30, 20, 10]
colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']

# Create the pie chart
plt.figure(figsize=(8, 6))
plt.pie(percentages, labels=fruits, colors=colors, autopct='%1.1f%%', startangle=140)

# Add title
plt.title('Favorite Fruits')

# Add legend
plt.legend(loc='best')

# Display the plot
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

